GK>K
GK>3
GK>E
GK>0
GK>Y
GK>S
GK>5
GK>8
GK>V
GK>N
GK>R
GK>T
GK>A
G1>K
G1>Y
G1>N
G1>H
G1>L
G1>4
G1>S
G1>Z
G1>T
G1>9
G1>V
G1>A
G1>1
G1>7
G1>2
G1>3
G1>0
G1>8
G1>6
G1>5
G1>G
GH>A
GH>0
GH>6
GH>Y
GH>1
GH>E
GH>3
GH>5
GH>7
GH>4
GH>G
GH>V
GH>R
GH>8
GH>T
GH>L
G3>L
G3>3
G3>Y
G3>N
G3>T
G3>7
G3>E
G3>S
G3>K
G3>R
G3>6
G3>5
G3>G
G3>8
G3>0
G3>Z
G3>H
G3>A
G3>1
G3>4
GY>4
GY>Z
GY>G
GY>N
GY>5
GY>3
GK=1
GK=Z
GK=7
GK=Y
GK=V
GK=0
GK=3
GK=Y
GL=A
G6S=
GK=6
GK=9
GL=K
GL=E
GL=R
GL=H
GL=N
GK=T
GK=R
GH=7
GK=H
GK=N
GK=L
GH=9
GK=K
GH=6
GH=4
GH=Y
GL=L
GH=V
GH=T
GH=R
GH=G
GH=2
GY>T
GY>6
GY>V
GY>2
GY>8
GY>L
GY>9
GY>K
GY>7
GY>0
GY>H
GY>1
GY>R
GS>T
GS>8
GS>7
GS>5
GS>R
GS>4
GS>2
GS>A
GS>1
GS>E
GS>G
GS>L
GS>K
GS>Y
GS>V
GR>4
GR>7
GR>6
GR>K
GR>2
GR>L
GR>1
GR>3
GR>G
GR>0
GR>N
GR>Z
GR>A
GR>Y
GR>T
GR>R
GR>H
GR>V
GR>8
GR>S
GG>V
GG>T
GG>5
GG>1
GG>L
GG>Z
GG>S
GG>Y
GG>H
GG>9
GG>R
GG>4
GG>0
GG>K
GG>6
GG>3
GG>8
GG>A
GG>N
GG>E
GZ>7
GZ>1
GZ>2
GZ>3
GR+S
GR+E
GR+G
GR+K
GR+H
GL+9
GR+Y
GR+3
GR+2
GL+6
GL+5
GL+2
GL+3
GL+0
GL+Z
GL+Y
GL+S
GL+T
GL+R
GL+L
GL+N
GL+K
G4+8
G7+1
GL+G
G4+5
G2+5
GK+9
G1+7
G3+L
G4+Z
G9+G
G8+5
GK+8
GR+7
G5+2
GK+6
G8+L
GL+A
GK+7
G2+E
GO+G
GK+4
GK+2
GK+3
GK+1
GZ+6
G6+E
GK+0
G5+9
GK+N
GK+R
GZ=6
GK+Z
GK+S
GZ=8
GK+T
GK+V
GZ=7
GK+Y
GZ=3
GZ=5
GK+L
GZ=4
GZ=1
GZ=2
GZ=V
GZ=L
GZ=Y
GZ=R
GZ=G
GZ=N
GZ=T
GZ=S
GZ=A
GZ=K
GZ=E
GY=4
GY=9
GY=8
GY=6
GY=3
GY=7
GY=5
GY=S
GY=R
GY=2
GY=0
GY=L
GY=1
GY=Y
GY=N
GY=Z
GY=T
GY=V
GV=9
GV=Y
GV=2
library(curlconverter)
library(curlconverter)
library(devtools)
#turn csv with lat/lon info into shapefile
library(rgdal)
library(rgeos)
library(tcltk)
csv.name<-tk_choose.files(caption='select csv file to convert into shapefile')
dat<-read.csv(csv.name)
make.shp=function(dat,lon.name,lat.name,filename)
{
dat=dat[!is.na(dat[[lon.name]]),]
#dat<-dat[!duplicated(dat$NestID),]
dat.coords=cbind(dat[[lon.name]],dat[[lat.name]])
names(dat.coords)
dat.coords=SpatialPoints(coordinates(dat.coords))
dat.spldf=SpatialPointsDataFrame(dat.coords,data.frame(id=1:length(dat.coords),dat))
colville.proj="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
proj4string(dat.spldf)=CRS(colville.proj)
writeOGR(dat.spldf,'.',filename,'ESRI Shapefile',overwrite=T)
}
shp.name=gsub('.csv','',csv.name)
lastbit=strsplit(shp.name,split='/')[[1]]
lastbit=lastbit[length(lastbit)]
lastbit=gsub(' ','',lastbit)
make.shp(dat,'Longitude','Latitude',lastbit)
#turn csv with lat/lon info into shapefile
library(rgdal)
library(rgeos)
library(tcltk)
csv.name<-tk_choose.files(caption='select csv file to convert into shapefile')
dat<-read.csv(csv.name)
make.shp=function(dat,lon.name,lat.name,filename)
{
dat=dat[!is.na(dat[[lon.name]]),]
#dat<-dat[!duplicated(dat$NestID),]
dat.coords=cbind(dat[[lon.name]],dat[[lat.name]])
names(dat.coords)
dat.coords=SpatialPoints(coordinates(dat.coords))
dat.spldf=SpatialPointsDataFrame(dat.coords,data.frame(id=1:length(dat.coords),dat))
colville.proj="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
proj4string(dat.spldf)=CRS(colville.proj)
writeOGR(dat.spldf,'.',filename,'ESRI Shapefile',overwrite=T)
}
shp.name=gsub('.csv','',csv.name)
lastbit=strsplit(shp.name,split='/')[[1]]
lastbit=lastbit[length(lastbit)]
lastbit=gsub(' ','',lastbit)
make.shp(dat,'Longitude','Latitude',lastbit)
#turn csv with lat/lon info into shapefile
library(rgdal)
library(rgeos)
library(tcltk)
csv.name<-tk_choose.files(caption='select csv file to convert into shapefile')
dat<-read.csv(csv.name)
ibuts<-dat[grep('_i',dat$NestID),]
table(ibuts)
table(ibuts$Species)
make.shp=function(dat,lon.name,lat.name,filename)
{
dat=dat[!is.na(dat[[lon.name]]),]
#dat<-dat[!duplicated(dat$NestID),]
dat.coords=cbind(dat[[lon.name]],dat[[lat.name]])
names(dat.coords)
dat.coords=SpatialPoints(coordinates(dat.coords))
dat.spldf=SpatialPointsDataFrame(dat.coords,data.frame(id=1:length(dat.coords),dat))
colville.proj="+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
proj4string(dat.spldf)=CRS(colville.proj)
writeOGR(dat.spldf,'.',filename,'ESRI Shapefile',overwrite=T)
}
shp.name
shp.name='ibutnests'
lastbit='ibutnests'
make.shp(ibuts,'Longitude','Latitude',lastbit)
5.4-2/3
5.4*2/3
lastbit
getwd()
setwd('~/Downloads/')
library(jsonlite)
library(httr)
abtest<-fromJSON(txt = "algaebaseoutput.txt")
sptest<-fromJSON(txt = "genspp.txt")
#curl string that works- genus search
# curl -g -X GET -H "abapikey:pL9oQFjncdidBjxUJqWR9k9TdpHkH975" "https://api.algaebase.org/v1.3/genus?genus=Haematococcus"
#r command sequence that works:
API_KEY = "pL9oQFjncdidBjxUJqWR9k9TdpHkH975"
url = "https://api.algaebase.org/v1.3/genus?genus=Haematococcus"
speciesurl="https://api.algaebase.org/v1.3/species?genus=[cn]Navicula&specificEpithet=[cn]acrosphaeria"
httpResponse <- GET(url, add_headers("abapikey" = API_KEY), accept_json())
speciesResponse<-GET(speciesurl,add_headers("abapikey"=API_KEY),accept_json())
results = fromJSON(content(httpResponse, "text"))
species.results<-fromJSON(content(speciesResponse,"text"))
species.results
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Amazon Corretto/jre8')
library(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files/Amazon Corretto/jdk11.0.16_8')
library(rJava)
q()
library(rgeos)
install.packages('rgeos')
install.packages('rgdal')
install.packages(c('spsurvey','spatstat','sf','plyr','dclone','snow','spdep','fields','MCMCvis'))
library(rgeos)
library(rgdal)
library(spsurvey) #for grts
library(spatstat)
library(sf)
library(plyr)
library(dclone)
path<-Sys.getenv("PATH")
newPath <- paste("C:\\rtools42\\usr\\bin\\;C:\\rtools42\\mingw_64\\bin;",
path, sep = "")
Sys.setenv(PATH = newPath)
library(nimble)
install.packages('nimble')
Sys.getenv("JAGS_HOME")
Sys.getenv(JAGS_HOME)
Sys.setenv(JAGS_HOME="C://Program Files//JAGS//JAGS-4.3.0")
library(R2jags)
install.packages('rjags','jagsUI','R2jags')
install.packages(c('rjags','jagsUI','R2jags'))
library(R2jags)
Sys.setenv(JAGS_HOME="C://Program Files//JAGS//JAGS-4.3.0")
library(rjags)
library(rjags)
Sys.setenv(JAGS_HOME="C:\\Program Files\\JAGS\\JAGS-4.3.0")
install.packages('coda')
install.packages('coda')
install.packages("coda")
library(coda)
library(rjags)
install.packages('rjags')
library(rjags)
Sys.setenv(JAGS_HOME="C:\\Program Files\\JAGS\\JAGS-4.3.0")
pkgbuild::find_rtools()
pkgbuild::rtools_path()
install.packages('rjags')
library(rjags)
install.packages("C:/Users/vpatil/Downloads/rjags_4-13.tar.gz", repos = NULL, type = "source")
library(rjags)
install.packages('rjags')
library(rjags)
install.packages("C:/Users/vpatil/Downloads/rjags_4-10.tar.gz", repos = NULL, type = "source")
install.packages('rjags')
library(rjags)
params=c('lambda','dens','Ndens.mean')
pred.var<-'nest.sum'
palo.nestcount<-tapply(palo.df[[pred.var]],list(palo.df$siteID,palo.df$Visit),sum)
?nb2WB(neigh)
?nb2WB
library(spdep)
library(twgeos)
install.packages('TWgeos')
install.packages('TWGeos')
# Installing GeoLight
install.packages("GeoLight")
# Installing SGAT
install.packages("devtools")
devtools::install_github("SWotherspoon/SGAT")
library(devtools)
library(algaeClassify)
?algaeClassify
data(package="algaeClassify")
data(lakegeneva)
data("mfg_csr_library")
data("csrTraits")
data("mfgTraits")
data("traitranges")
lakegeneva
data("mfg_csr_library")
data("csrTraits")
data("mfgTraits")
data("traitranges")
save.image('~/ecosystem analytics/')
save.image('~/ecosystem analytics/algaeClassifydata.RData')
# set directory to the package development folder
setwd("~/gleon/Geisha/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# STEP 2, add functionality ###################################################
# (1) update DESCRIPTION file (package description, authors, dependencies)
# (2) add functions (*.R) in R folder of package
# (3) within *.R files should include roxygen2 markdown of function and
#     parameter txt (e.g., what you see in manual)
###############################################################################
setwd('algaeClassify/data/')
dir(pattern='rda')
dir(pattern='.rda',fixed=TRUE)
dir(pattern='.rda')
dir()
lakegeneva<-load('lakegeneva.rda')
# set directory to the package development folder
setwd("~/Geisha_main/phyto_package/GEISHA_phytoplankton_github_shared/package builds/")
# STEP 2, add functionality ###################################################
# (1) update DESCRIPTION file (package description, authors, dependencies)
# (2) add functions (*.R) in R folder of package
# (3) within *.R files should include roxygen2 markdown of function and
#     parameter txt (e.g., what you see in manual)
###############################################################################
setwd('algaeClassify/data/')
dir()
lakegeneva<-load('lakegeneva.rda')
lakegeneva<-load('lakegeneva.rda')
csrTraits<-load('csrTraits.rda')
mfg_csr_library<-load('mfg_csr_library.rda')
mfgTraits<-load('mfgTraits.rda')
species_mfg_library<-load('species_mfg_library.rda')
traitranges<-load('traitranges.rda')
use_data(lakegeneva, pkg = thePackage, overwrite = TRUE)
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
install.packages('devtools')
install.packages("devtools")
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
# create new bare-bones package in development folder
# NOTE: only run package creation script once
#install.packages("devtools"); # make sure your have the most recent version
#install.packages("roxygen2"); # make sure your have the most recent version
library(devtools); library(roxygen2)
library(devtools); library(roxygen2)
create(thePackage)
